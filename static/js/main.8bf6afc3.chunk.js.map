{"version":3,"sources":["Components/VideoPlayer/VideoControls.tsx","Components/VideoPlayer/VideoReactPlayer.tsx","Components/VideoPlayer/VideoPlayer.tsx","Components/Queue/QueueElement.tsx","Components/Queue/Queue.tsx","Components/App.tsx","serverConfig/config.ts","reportWebVitals.ts","index.tsx"],"names":["timer","VideoControls","props","smallTimeBarRef","useRef","bigTimeBarRef","controlsRef","useState","hidden","setHidden","onMouseMoveLeaveHandler","videoStatusHandler","className","videoPlay","onMouseMove","clearTimeout","setTimeout","onMouseLeave","onClick","e","target","current","onMouseClickHandler","ref","videoTitle","style","width","offsetWidth","loaded","played","Date","playedSeconds","toISOString","substr","videoDuration","currentVolume","type","min","max","onChange","inputValueHandler","parseInt","value","fullscreenHandler","active","exit","enter","VideoReactPlayer","bigPlayer","videoPlayStatus","setVideoPlayStatus","videoVolume","setVideoVolume","videoCurrentLoaded","setVideoCurrentLoaded","videoCurrentPlayed","setVideoCurrentPlayed","videoCurrentPlayedSeconds","setVideoCurrentPlayedSeconds","serverVideoPlayStatusHandler","status","synchroVideoSeek","socket","emit","useEffect","on","video","newTime","currentTime","seekTo","height","volume","autoPlay","playing","url","currentVideo","link","onProgress","onProgressHandler","onReady","duration","title","VideoPlayer","setVideo","undefined","fcHandle","useFullScreenHandle","handle","QueueElement","id","href","src","thumbnail","alt","description","Queue","videos","setVideos","addVideoOpen","setAddVideoOpen","controlVideoOpen","setControlVideoOpen","linkValue","setLinkValue","titleValue","setTitleValue","descriptionValue","setDescriptionValue","currentUsers","setCurrentUsers","smallPlayer","titleInput","linkInput","descriptionInput","videosQueue","users","openVideoHandler","addVideoButtonHandler","ReactPlayer","canPlay","ytid","getYouTubeID","slice","length","trim","newVideo","getDuration","addVideoHandler","videoServerStatusHandler","required","maxLength","display","time","forEach","el","countQueueTime","map","io","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAoBIA,E,+GA+FWC,EA9F2B,SAACC,GAAW,IAAD,QAE3CC,EAAkBC,iBAAuB,MACzCC,EAAgBD,iBAAuB,MACvCE,EAAcF,iBAAuB,MAJM,EAMrBG,oBAAkB,GANG,mBAM1CC,EAN0C,KAMlCC,EANkC,KAgB3CC,EAA0B,kBAAMD,GAAU,IAO1CE,EAAqB,kBAAMT,EAAMS,sBAEvC,OACI,sBACIC,UACIV,EAAMW,WAAcL,EAClB,+BACAN,EAAMW,UACN,kBACA,iCAENC,YAAa,WAzBL,MAATd,GACCe,aAAaf,GAEjBA,EAAQgB,WAAWN,EAAwB,KAC3CD,GAAU,IAsBNQ,aAAc,WAAOP,KACrBQ,QAAS,SAACC,IAlBU,SAACA,GACtBA,EAAEC,SAAWd,EAAYe,SACxBV,IAgBiBW,CAAoBH,IACrCI,IAAKjB,EAXT,UAcI,qBAAKM,UAAYJ,GAAWN,EAAMW,UAA2B,8BAAf,aAA9C,SACKX,EAAMsB,aAGX,qBAAKZ,WAAYJ,GAAWN,EAAMW,YAAeX,EAAMW,UAA+B,sCAAnB,iBAA0DK,QAASP,EAAtI,SACMT,EAAMW,UAAgC,cAAC,IAAD,IAApB,cAAC,IAAD,MAGxB,qBAAKD,UAAWJ,GAAUN,EAAMW,UAAY,eAAiB,8BAA+BU,IAAKpB,EAAjG,SACI,qBAAKS,UAAU,gBAAgBa,MAAO,CAACC,MAAM,GAAD,SAAK,UAAAvB,EAAgBkB,eAAhB,eAAyBM,cAAe,GAAKzB,EAAM0B,OAAxD,OAA5C,SACI,qBAAKhB,UAAU,iBAAiBa,MAAO,CAACC,MAAM,GAAD,SAAK,UAAAvB,EAAgBkB,eAAhB,eAAyBM,cAAe,GAAKzB,EAAM2B,OAAxD,aAIrD,sBAAKjB,UAAYJ,GAAWN,EAAMW,UAAwB,sBAAX,SAA/C,UACI,qBAAKD,UAAU,cAAcM,QAASP,EAAtC,SACMT,EAAMW,UAAgC,cAAC,IAAD,IAApB,cAAC,IAAD,MAExB,qBAAKD,UAAU,SAAf,SACI,+BACK,IAAIkB,KAA4B,KAAlB,OAAL5B,QAAK,IAALA,OAAA,EAAAA,EAAO6B,gBAAsBC,cAAcC,OAAO,GAAI,OAIxE,qBAAKrB,UAAU,aAAaW,IAAKlB,EAAjC,SACI,qBAAKO,UAAU,gBAAgBa,MAAO,CAACC,MAAM,GAAD,SAAK,UAAArB,EAAcgB,eAAd,eAAuBM,cAAe,GAAKzB,EAAM0B,OAAtD,OAA5C,SACI,qBAAKhB,UAAU,iBAAiBa,MAAO,CAACC,MAAM,GAAD,SAAK,UAAArB,EAAcgB,eAAd,eAAuBM,cAAe,GAAKzB,EAAM2B,OAAtD,aAIrD,qBAAKjB,UAAU,SAAf,SACI,+BACK,IAAIkB,KAA4B,KAAlB,OAAL5B,QAAK,IAALA,OAAA,EAAAA,EAAOgC,gBAAsBF,cAAcC,OAAO,GAAI,OAGxE,sBAAKrB,UAAU,SAAf,UAC8B,IAAxBV,EAAMiC,cAAsB,cAAC,IAAD,IAClBjC,EAAMiC,cAAgB,IAAO,cAAC,IAAD,IAC7BjC,EAAMiC,cAAgB,GAAO,cAAC,IAAD,IAC7BjC,EAAMiC,cAAgB,IAAO,cAAC,IAAD,IAC7B,cAAC,IAAD,IACZ,qBAAKvB,UAAU,eAAf,SACI,uBAAOwB,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,SAAU,SAACpB,GAAD,OAAOjB,EAAMsC,kBAAkBC,SAAStB,EAAEC,OAAOsB,gBAGzG,qBAAK9B,UAAU,aAAaM,QAAUhB,EAAMyC,kBAAkBC,OAAyC1C,EAAMyC,kBAAkBE,KAAxD3C,EAAMyC,kBAAkBG,MAA/F,SACI,cAAC,IAAD,aCFLC,EA/FiC,SAAC7C,GAAW,IAAD,MAEjD8C,EAAY5C,iBAAoB,MAFiB,EAITG,oBAAkB,GAJT,mBAIhD0C,EAJgD,KAI/BC,EAJ+B,OAKjB3C,mBAAiB,IALA,mBAKhD4C,EALgD,KAKnCC,EALmC,OAMH7C,mBAAiB,GANd,mBAMhD8C,EANgD,KAM5BC,EAN4B,OAOH/C,mBAAiB,GAPd,mBAOhDgD,EAPgD,KAO5BC,EAP4B,OAQWjD,mBAAiB,GAR5B,mBAQhDkD,EARgD,KAQrBC,EARqB,KAiBjDC,EAA+B,SAACC,IACpB,IAAXA,GACCC,IACJX,EAAmBU,IAkBjBC,EAAmB,WACrBC,EAAOC,KAAK,2BA0BhB,OAvBAC,qBAAU,WACNF,EAAOG,GAAG,sBAAsB,SAACC,GAAmB,IAAD,EACzCC,GAAuB,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOE,cAAe,EAC9C,UAAApB,EAAU3B,eAAV,SAAmBgD,OAAOF,MAG9BL,EAAOG,GAAG,qBAAoB,WAEtBN,GAA6B,MAGrCG,EAAOG,GAAG,sBAAqB,WACvBhB,GACAU,GAA6B,MAGrCG,EAAOG,GAAG,gBAAgB,WACtBX,EAAsB,GACtBE,EAAsB,GACtBE,EAA6B,QAEnC,IAGE,gCACQ,cAAC,IAAD,CACI9C,UAAU,aACVc,MAAM,OACN4C,OAAO,QACPC,OAAQpB,EACRqB,UAAU,EACVC,QAASxB,EACT1B,IAAKyB,EACL0B,IAAG,UAAExE,EAAMyE,oBAAR,aAAE,EAAoBC,KACzBC,WAAY,SAAC1D,GAAD,OArDF,SAACA,GACvBqC,EAAsBrC,EAAEU,QACxByB,EAAsBnC,EAAES,QACxB8B,EAA6BvC,EAAEY,eAkDA+C,CAAkB3D,IACrC4D,QAAS,WA3CrBjB,EAAOC,KAAK,6BA6CJ,cAAC,EAAD,CACInC,OAAQyB,EACRxB,OAAQ0B,EACRxB,cAAe0B,EACfvB,eAAe,UAAAhC,EAAMyE,oBAAN,eAAoBK,WAAY,EAC/CrC,kBAAiB,OAAEzC,QAAF,IAAEA,OAAF,EAAEA,EAAOyC,kBAC1BnB,YAAY,UAAAtB,EAAMyE,oBAAN,eAAoBM,QAAS,GACzCpE,UAAWoC,EACXT,kBAAmB,SAAArB,GAzD/BiC,EAyDuDjC,EAzDjC,MA0DVgB,cAAegB,EACfxC,mBA9EmB,WAC3BsC,GACAY,IACJX,GAAoBD,UCcbiC,EA3B4B,SAAChF,GAAW,IAAD,EAExBK,qBAFwB,mBAE3C2D,EAF2C,KAEpCiB,EAFoC,KAIlDnB,qBAAU,WACNF,EAAOG,GAAG,qBAAqB,SAACU,GAC5BQ,EAASR,MAEbb,EAAOG,GAAG,gBAAgB,WACtBkB,OAASC,QAEf,CAAClB,IAEH,IAAMmB,EAAWC,cAEjB,OACI,qBAAK1E,UAAU,iBAAf,SACI,cAAC,IAAD,CAAY2E,OAAQF,EAApB,SACI,cAAC,EAAD,CACIV,aAAcT,EACdvB,kBAAmB0C,S,yBCIxBG,G,MArB8B,SAACtF,GAE1C,OACI,sBAAKU,UAAwB,IAAbV,EAAMuF,GAAW,qCAAuC,iBAAxE,UACI,mBAAGC,KAAMxF,EAAM0E,KAAMxD,OAAQ,SAA7B,SACI,qBAAKR,UAAU,QAAf,SACI,qBAAK+E,IAAKzF,EAAM0F,UAAWC,IAAI,wBAGvC,sBAAKjF,UAAU,cAAf,UACI,mBAAG8E,KAAMxF,EAAM0E,KAAMxD,OAAQ,SAA7B,SACI,qBAAKR,UAAU,QAAf,SAAwBV,EAAM+E,UAElC,qBAAKrE,UAAU,cAAf,SAA8BV,EAAM4F,cACpC,qBAAKlF,UAAU,WAAf,SAA2B,IAAIkB,KAAsB,IAAjB5B,EAAM8E,UAAiBhD,cAAcC,OAAO,GAAI,aC8IrF8D,EA7Je,SAAC7F,GAAW,IAAD,EACTK,mBAAmB,IADV,mBAC9ByF,EAD8B,KACtBC,EADsB,OAEG1F,oBAAkB,GAFrB,mBAE9B2F,EAF8B,KAEhBC,EAFgB,OAGW5F,oBAAkB,GAH7B,mBAG9B6F,EAH8B,KAGZC,EAHY,OAKH9F,mBAAiB,IALd,mBAK9B+F,EAL8B,KAKnBC,EALmB,OAMDhG,mBAAiB,IANhB,mBAM9BiG,EAN8B,KAMlBC,EANkB,OAOWlG,mBAAiB,IAP5B,mBAO9BmG,EAP8B,KAOZC,EAPY,OAQGpG,mBAAiB,GARpB,mBAQ9BqG,EAR8B,KAQhBC,EARgB,KAU/BC,EAAc1G,iBAAoB,MAClC2G,EAAa3G,iBAAyB,MACtC4G,EAAY5G,iBAAyB,MACrC6G,EAAmB7G,iBAAyB,MAElD4D,qBAAU,WACNF,EAAOG,GAAG,uBAAuB,SAACiD,GAC9BjB,EAAUiB,MAEdpD,EAAOG,GAAG,uBAAuB,SAACkD,GAC9BN,EAAgBM,QAErB,CAACnB,IAEJ,IA+BMoB,EAAmB,WACrBjB,GAAiBD,GACdE,GACCC,GAAoB,IAQtBgB,EAAwB,YA1CN,WACpB,IAAMzC,EAAO0B,EACb,GAAGgB,IAAYC,QAAQ3C,GACvB,CACI,IACIgB,EAMAX,EAPEuC,EAAOC,IAAa7C,GAGtBgB,EADQ,OAAT4B,EACU,qCAAiCA,EAAjC,UAEG,wEAMhBvC,EAAQuB,EAAWkB,MAAM,EAAE,IAE3B,IAAI5B,EAAsB,GACK,IAA5BY,EAAiBiB,SAChB7B,EAAcY,EAAiBkB,OAAOF,MAAM,EAAE,MAClD,IAAMG,EAAmB,CACrBjD,OACAgB,YACAX,QACAa,cACAd,SAAU8B,EAAYzF,QAASyG,eAEnChE,EAAOC,KAAK,iBAAkB8D,IAgBlCE,GACAxB,EAAa,IACbE,EAAc,IACdE,EAAoB,IACpBS,KAGEY,EAA2B,SAACpE,GAC3BA,EACEE,EAAOC,KAAK,sBAEZD,EAAOC,KAAK,sBAWrB,OACI,sBAAKnD,UAAU,eAAf,UACI,sBAAKA,UAAWwF,EAAmB,kCAAoC,eAAvE,UACQ,uBAAOhE,KAAK,UACZ,sBAAKxB,UAAU,UAAf,UACI,qBAAKA,UAAU,gBAAgBM,QAAS,kBAAM8G,GAAyB,IAAvE,kBAGA,qBAAKpH,UAAU,gBAAgBM,QAAS,kBAAM8G,GAAyB,IAAvE,kBAGA,qBAAKpH,UAAU,gBAAgBM,QAAS,kBAnB7B4C,EAAOC,KAAK,oBAmBvB,wBAKZ,sBAAKnD,UAAWsF,EAAe,kCAAoC,eAAnE,UACI,sBAAKtF,UAAU,cAAf,UACI,gCACI,sCACA,uBAAOwB,KAAK,OAAOM,MAAO4D,EAAW/D,SAAU,SAAApB,GAAMoF,EAAapF,EAAEC,OAAOsB,QAASuF,UAAU,EAAM1G,IAAKyF,OAE7G,gCACI,uCACA,uBAAO5E,KAAK,OAAOM,MAAO8D,EAAYjE,SAAU,SAAApB,GAAMsF,EAActF,EAAEC,OAAOsB,QAASuF,UAAU,EAAMC,UAAW,GAAI3G,IAAKwF,OAE9H,gCACI,6CACA,uBAAO3E,KAAK,OAAOM,MAAOgE,EAAkBnE,SAAU,SAAApB,GAAMwF,EAAoBxF,EAAEC,OAAOsB,QAASwF,UAAW,IAAK3G,IAAK0F,UAG/H,wBAAQ/F,QAAS,kBAAMmG,KAAvB,iBACA,cAAC,IAAD,CAAa5F,MAAO,CAAC0G,QAAQ,QAASzD,IAAK4B,EAAWhC,OAAM,QAAW/C,IAAKuF,OAEhF,sBAAKlG,UAAU,aAAf,UACI,sBAAKA,UAAU,aAAf,UACI,0CACA,iCAAM,cAAC,IAAD,IAAYgG,KAClB,iCAAM,cAAC,IAAD,IACL,IAAI9E,KAAwB,IA7CtB,WACnB,IAAIsG,EAAc,EAElB,OADApC,EAAOqC,SAAQ,SAAAC,GAAE,OAAIF,GAAQE,EAAGtD,YACzBoD,EA0CeG,IAAyBvG,cAAcC,OAAO,GAAI,SAGhE,sBAAKrB,UAAU,UAAf,UACI,qBAAKA,UAAU,qBAAqBM,QAAS,kBAvEzDmF,GAAqBD,QAClBF,GACCC,GAAgB,KAqER,sBAGA,sBAAKvF,UAAU,WAAWM,QAAS,kBAAMkG,KAAzC,uBACc,cAAC,IAAD,CAAoBxG,UAAU,qBAIpD,qBAAKA,UAAU,SACf,qBAAKA,UAAU,YAAf,SACKoF,EAAOwC,KAAI,SAACF,EAAI7C,GAAL,OACR,cAAC,EAAD,CAEIA,GAAIA,EACJR,MAAOqD,EAAGrD,MACVL,KAAM0D,EAAG1D,KACTI,SAAUsD,EAAGtD,SACbY,UAAW0C,EAAG1C,UACdE,YAAawC,EAAGxC,aAAe,IAPnC,eACiBwC,EAAGrD,OADpB,OAC4BqD,EAAG1D,gBCvItCd,EAAS2E,YCrBT,+BDiCEC,EAVA,WAEX,OACI,sBAAK9H,UAAU,OAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QEfG+H,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8bf6afc3.chunk.js","sourcesContent":["import React, {FC, useRef, useState} from 'react';\r\n\r\nimport './VideoControls.scss';\r\n\r\nimport {IoPlayOutline, IoVolumeOffOutline, IoExpandOutline, IoPauseOutline, IoVolumeMuteOutline, IoVolumeHighOutline, IoVolumeMediumOutline, IoVolumeLowOutline} from 'react-icons/io5';\r\n\r\ninterface IVideoControls {\r\n    loaded: number;\r\n    played: number;\r\n    playedSeconds: number;\r\n    videoDuration: number;\r\n    fullscreenHandler: any;\r\n    videoTitle: string;\r\n    videoPlay: boolean;\r\n    currentVolume: number;\r\n\r\n    videoStatusHandler(): void;\r\n    inputValueHandler(volume: number): void;\r\n}\r\n\r\nlet timer: NodeJS.Timeout;\r\nconst VideoControls: FC<IVideoControls> = (props) => {\r\n    //refs\r\n    const smallTimeBarRef = useRef<HTMLDivElement>(null);\r\n    const bigTimeBarRef = useRef<HTMLDivElement>(null);\r\n    const controlsRef = useRef<HTMLDivElement>(null);\r\n    //states\r\n    const [hidden, setHidden] = useState<boolean>(true);\r\n    //handlers\r\n    const onMouseMoveHandler = () => {\r\n        if(timer != null)\r\n            clearTimeout(timer);\r\n\r\n        timer = setTimeout(onMouseMoveLeaveHandler,2000);\r\n        setHidden(false);\r\n    };\r\n\r\n    const onMouseMoveLeaveHandler = () => setHidden(true);\r\n\r\n    const onMouseClickHandler = (e: React.MouseEvent<HTMLElement>) => {\r\n        if(e.target === controlsRef.current)\r\n            videoStatusHandler();\r\n    };\r\n\r\n    const videoStatusHandler = () => props.videoStatusHandler();\r\n\r\n    return (\r\n        <div \r\n            className={\r\n                props.videoPlay  && hidden\r\n                ? 'controlsWrapper cursorHidden' \r\n                : props.videoPlay \r\n                ? 'controlsWrapper'\r\n                : 'controlsWrapper controlsPaused'\r\n            }\r\n            onMouseMove={() => {onMouseMoveHandler()}}\r\n            onMouseLeave={() => {onMouseMoveLeaveHandler()}}\r\n            onClick={(e) => {onMouseClickHandler(e)}}\r\n            ref={controlsRef}\r\n        >\r\n            {/* Title */}\r\n            <div className={!hidden || !props.videoPlay ? 'videoTitle' : 'videoTitle videoTitleHidden'}>\r\n                {props.videoTitle}\r\n            </div>\r\n            {/* Middle video status */}\r\n            <div className={!hidden && !props.videoPlay  || !props.videoPlay ? 'midVideoStatus' : 'midVideoStatus midVideoStatusHidden'} onClick={videoStatusHandler}>\r\n                {!props.videoPlay ? <IoPlayOutline /> : <IoPauseOutline />}\r\n            </div>\r\n            {/* SMALL BAR */}\r\n            <div className={hidden && props.videoPlay ? 'smallTimeBar' : 'smallTimeBar hiddenSmallBar'} ref={smallTimeBarRef}>\r\n                <div className='loadedTimeBar' style={{width:`${(smallTimeBarRef.current?.offsetWidth || 0) * props.loaded}px`}}>\r\n                    <div className=\"currentTimeBar\" style={{width:`${(smallTimeBarRef.current?.offsetWidth || 0) * props.played}px`}} />\r\n                </div>\r\n            </div>\r\n            {/* BIG BAR */}\r\n            <div className={!hidden || !props.videoPlay  ? 'bigBar' : 'bigBar hiddenBigBar'}>\r\n                <div className='videoStatus' onClick={videoStatusHandler}>\r\n                    {!props.videoPlay ? <IoPlayOutline /> : <IoPauseOutline />}\r\n                </div>\r\n                <div className=\"timers\">\r\n                    <span>\r\n                        {new Date(props?.playedSeconds * 1000).toISOString().substr(11, 8)}\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"bigTimeBar\" ref={bigTimeBarRef}>\r\n                    <div className=\"loadedTimeBar\" style={{width:`${(bigTimeBarRef.current?.offsetWidth || 0) * props.loaded}px`}}>\r\n                        <div className=\"currentTimeBar\" style={{width:`${(bigTimeBarRef.current?.offsetWidth || 0) * props.played}px`}}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"timers\">\r\n                    <span>\r\n                        {new Date(props?.videoDuration * 1000).toISOString().substr(11, 8)}\r\n                    </span>\r\n                </div>\r\n                <div className=\"volume\">\r\n                    { props.currentVolume === 0 ? <IoVolumeMuteOutline /> : \r\n                                props.currentVolume > 0.75 ? <IoVolumeHighOutline/> : \r\n                                props.currentVolume > 0.50 ? <IoVolumeMediumOutline/> : \r\n                                props.currentVolume > 0.25 ? <IoVolumeLowOutline/> :\r\n                                <IoVolumeOffOutline />  }\r\n                    <div className='volumeSlider'>\r\n                        <input type='range' min='0' max='100' onChange={(e) => props.inputValueHandler(parseInt(e.target.value))}/>\r\n                    </div>\r\n                </div>\r\n                <div className='fullscreen' onClick={!props.fullscreenHandler.active ? props.fullscreenHandler.enter : props.fullscreenHandler.exit}>\r\n                    <IoExpandOutline />\r\n                </div>\r\n            </div>\r\n            {/* END OF BIG BAR */}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default VideoControls;","import React, {FC, useEffect, useRef, useState} from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport { IVideo, socket } from '../App';\r\nimport VideoControls from './VideoControls';\r\n\r\ninterface IVideoReactPlayer {\r\n    currentVideo?: IVideo;\r\n    fullscreenHandler: any;\r\n}\r\n \r\nconst VideoReactPlayer: FC<IVideoReactPlayer> = (props) => {\r\n    //refs\r\n    const bigPlayer = useRef<ReactPlayer>(null);\r\n    //video states\r\n    const [videoPlayStatus, setVideoPlayStatus] = useState<boolean>(false);\r\n    const [videoVolume, setVideoVolume] = useState<number>(50);\r\n    const [videoCurrentLoaded, setVideoCurrentLoaded] = useState<number>(0);\r\n    const [videoCurrentPlayed, setVideoCurrentPlayed] = useState<number>(0);\r\n    const [videoCurrentPlayedSeconds, setVideoCurrentPlayedSeconds] = useState<number>(0);\r\n\r\n    //video handlers\r\n    const userVideoPlayStatusHandler = () => {\r\n        if(!videoPlayStatus)\r\n            synchroVideoSeek();\r\n        setVideoPlayStatus(!videoPlayStatus);\r\n    };\r\n\r\n    const serverVideoPlayStatusHandler = (status: boolean) => {\r\n        if(status === true)\r\n            synchroVideoSeek();\r\n        setVideoPlayStatus(status);\r\n    };\r\n\r\n    const onProgressHandler = (e:any) => {\r\n        setVideoCurrentPlayed(e.played)\r\n        setVideoCurrentLoaded(e.loaded)\r\n        setVideoCurrentPlayedSeconds(e.playedSeconds)\r\n    };\r\n    \r\n    const inputVolumeHandler = (volume: number) => {\r\n        setVideoVolume(volume/100);\r\n    };\r\n\r\n    const onReadyHandler = () => {\r\n        socket.emit('get-current-video-data');\r\n    }\r\n\r\n    // sockets\r\n    const synchroVideoSeek = () => {\r\n        socket.emit('get-current-video-data');\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('current-video-data', (video: IVideo) => {\r\n            const newTime: number = video?.currentTime || 0;\r\n            bigPlayer.current?.seekTo(newTime);\r\n        });\r\n\r\n        socket.on('server-video-stop',() => {\r\n            // if(videoPlayStatus)\r\n                serverVideoPlayStatusHandler(false);\r\n        });\r\n    \r\n        socket.on('server-video-start',() => {\r\n            if(!videoPlayStatus)\r\n                serverVideoPlayStatusHandler(true);\r\n        });\r\n\r\n        socket.on('end-of-queue', () => {\r\n            setVideoCurrentLoaded(0);\r\n            setVideoCurrentPlayed(0);\r\n            setVideoCurrentPlayedSeconds(0);\r\n        });\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n                <ReactPlayer\r\n                    className='reactVideo'\r\n                    width='100%'\r\n                    height='100vh'\r\n                    volume={videoVolume}\r\n                    autoPlay={true}\r\n                    playing={videoPlayStatus}\r\n                    ref={bigPlayer}\r\n                    url={props.currentVideo?.link}\r\n                    onProgress={(e) => onProgressHandler(e)}\r\n                    onReady={() => onReadyHandler()}\r\n                />\r\n                <VideoControls \r\n                    loaded={videoCurrentLoaded}\r\n                    played={videoCurrentPlayed}\r\n                    playedSeconds={videoCurrentPlayedSeconds}\r\n                    videoDuration={props.currentVideo?.duration || 0}\r\n                    fullscreenHandler={props?.fullscreenHandler}\r\n                    videoTitle={props.currentVideo?.title || ''}\r\n                    videoPlay={videoPlayStatus}\r\n                    inputValueHandler={e => inputVolumeHandler(e)}\r\n                    currentVolume={videoVolume}\r\n                    videoStatusHandler={userVideoPlayStatusHandler}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default VideoReactPlayer;","import React, {FC, useEffect, useState} from 'react';\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\n\r\nimport { IVideo, socket } from '../App';\r\nimport './VideoPlayer.scss';\r\nimport VideoReactPlayer from './VideoReactPlayer';\r\n\r\ninterface IVideoPlayerProps {\r\n\r\n}\r\n \r\nconst VideoPlayer: FC<IVideoPlayerProps> = (props) => {\r\n\r\n    const [video, setVideo] = useState<IVideo>();\r\n\r\n    useEffect(() => {\r\n        socket.on('user-change-video', (currentVideo: IVideo) => {\r\n            setVideo(currentVideo);\r\n        });\r\n        socket.on('end-of-queue', () => {\r\n            setVideo(undefined);\r\n        });\r\n    },[video]);\r\n    \r\n    const fcHandle = useFullScreenHandle();\r\n\r\n    return (\r\n        <div className='videoContainer'>\r\n            <FullScreen handle={fcHandle}>\r\n                <VideoReactPlayer \r\n                    currentVideo={video}\r\n                    fullscreenHandler={fcHandle}\r\n                />\r\n            </FullScreen>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default VideoPlayer;","import React,{ FC } from 'react';\r\n\r\nimport './Queue.scss';\r\n\r\n\r\ninterface IQueueElementProps {\r\n    id: number;\r\n    title: string;\r\n    duration: number;\r\n    link: string;\r\n    thumbnail: string;\r\n    description: string;\r\n}\r\n \r\nconst QueueElement: FC<IQueueElementProps> = (props) => {\r\n\r\n    return ( \r\n        <div className={props.id === 0 ? 'elementWrapper elementWrapperFirst' : 'elementWrapper'}>\r\n            <a href={props.link} target={'_blank'}>\r\n                <div className=\"image\">\r\n                    <img src={props.thumbnail} alt='Video thumbnail'/>\r\n                </div>\r\n            </a>\r\n            <div className=\"elementInfo\">\r\n                <a href={props.link} target={'_blank'}>\r\n                    <div className=\"title\">{props.title}</div>\r\n                </a>\r\n                <div className=\"description\">{props.description}</div>\r\n                <div className=\"duration\">{new Date(props.duration * 1000).toISOString().substr(11, 8)}</div>\r\n            </div>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default QueueElement;","import React,{FC, useEffect, useRef, useState} from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport getYouTubeID from 'get-youtube-id';\r\n// import getYoutubeTitle from 'get-youtube-title';\r\n\r\nimport './Queue.scss';\r\nimport {IoAddCircleOutline, IoPerson, IoTimerOutline} from 'react-icons/io5';\r\n\r\nimport {IVideo, socket} from '../App';\r\nimport QueueElement from './QueueElement';\r\n\r\ninterface QueueProps {}\r\n \r\nconst Queue: FC<QueueProps> = (props) => {\r\n    const [videos, setVideos] = useState<IVideo[]>([])\r\n    const [addVideoOpen, setAddVideoOpen] = useState<boolean>(false);\r\n    const [controlVideoOpen, setControlVideoOpen] = useState<boolean>(false);\r\n    \r\n    const [linkValue, setLinkValue] = useState<string>('');\r\n    const [titleValue, setTitleValue] = useState<string>('');\r\n    const [descriptionValue, setDescriptionValue] = useState<string>('');\r\n    const [currentUsers, setCurrentUsers] = useState<number>(0);\r\n\r\n    const smallPlayer = useRef<ReactPlayer>(null);\r\n    const titleInput = useRef<HTMLInputElement>(null);\r\n    const linkInput = useRef<HTMLInputElement>(null);\r\n    const descriptionInput = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        socket.on('current-video-array', (videosQueue: IVideo[]) => {\r\n            setVideos(videosQueue);\r\n        });\r\n        socket.on('current-users-count', (users)=>{\r\n            setCurrentUsers(users);\r\n        })\r\n    }, [videos]);\r\n\r\n    const addVideoHandler = () => {\r\n        const link = linkValue;\r\n        if(ReactPlayer.canPlay(link))\r\n        {\r\n            const ytid = getYouTubeID(link);\r\n            let thumbnail: string;\r\n            if(ytid !== null)\r\n                thumbnail = `https://img.youtube.com/vi/${ytid}/0.jpg`;\r\n            else\r\n                thumbnail = 'https://planasa.com/wp-content/uploads/2017/04/frambuesas-adelita.jpg';\r\n                \r\n            let title: string;\r\n            // if(titleValue === '' && ytid !== null)\r\n                // title = getYoutubeTitle(ytid).slice(0,50);\r\n            // else\r\n            title = titleValue.slice(0,50);\r\n\r\n            let description: string = '';\r\n            if(descriptionValue.length !== 0)\r\n                description = descriptionValue.trim().slice(0,500);\r\n            const newVideo: IVideo = {\r\n                link,\r\n                thumbnail,\r\n                title,\r\n                description,\r\n                duration: smallPlayer.current!.getDuration(),\r\n            };\r\n            socket.emit('user-add-video', newVideo);\r\n        }\r\n    }\r\n\r\n    const openVideoHandler = () => {\r\n        setAddVideoOpen(!addVideoOpen);\r\n        if(controlVideoOpen)\r\n            setControlVideoOpen(false)\r\n    };\r\n    const openControlVideoHandler = () => {\r\n        setControlVideoOpen(!controlVideoOpen)\r\n        if(addVideoOpen)\r\n            setAddVideoOpen(false)\r\n    };\r\n    \r\n    const addVideoButtonHandler = () => {\r\n        addVideoHandler();\r\n        setLinkValue('');\r\n        setTitleValue('');\r\n        setDescriptionValue('');\r\n        openVideoHandler();\r\n    };\r\n\r\n    const videoServerStatusHandler = (status: boolean) => {\r\n        if(status)\r\n             socket.emit('server-video-start'); \r\n         else\r\n             socket.emit('server-video-stop');\r\n    };\r\n\r\n    const videoSkipHandler = () => socket.emit('user-skip-video');\r\n\r\n    const countQueueTime = () => {\r\n        let time:number = 0;\r\n        videos.forEach(el => time += el.duration);\r\n        return time;\r\n    }\r\n\r\n    return ( \r\n        <div className='queueWrapper'>\r\n            <div className={controlVideoOpen ? 'controlVideo controlVideoActive' : 'controlVideo'}>\r\n                    <input type='range' />\r\n                    <div className='buttons'>\r\n                        <div className='controlButton' onClick={() => videoServerStatusHandler(true)}>\r\n                            play\r\n                        </div>\r\n                        <div className='controlButton' onClick={() => videoServerStatusHandler(false)}>\r\n                            stop\r\n                        </div>\r\n                        <div className='controlButton' onClick={() => videoSkipHandler()}>\r\n                            skip\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            <div className={addVideoOpen ? 'addVideoForm addVideoFormActive' : 'addVideoForm'}>\r\n                <div className='addControls'>\r\n                    <div>\r\n                        <p>Link:</p>\r\n                        <input type=\"text\" value={linkValue} onChange={e => {setLinkValue(e.target.value)}} required={true} ref={linkInput}/>                        \r\n                    </div>\r\n                    <div>\r\n                        <p>Title:</p>\r\n                        <input type=\"text\" value={titleValue} onChange={e => {setTitleValue(e.target.value)}} required={true} maxLength={40} ref={titleInput}/>                        \r\n                    </div>\r\n                    <div>\r\n                        <p>Description:</p>\r\n                        <input type=\"text\" value={descriptionValue} onChange={e => {setDescriptionValue(e.target.value)}} maxLength={300} ref={descriptionInput}/>\r\n                    </div>\r\n                </div>\r\n                <button onClick={() => addVideoButtonHandler()}>Add</button>\r\n                <ReactPlayer style={{display:'none'}} url={linkValue} height={`300px`} ref={smallPlayer} />\r\n            </div>\r\n            <div className='queueStats'>\r\n                <div className='videoStats'>\r\n                    <h1>Playlist</h1>\r\n                    <span><IoPerson/>{currentUsers}</span>\r\n                    <span><IoTimerOutline />\r\n                    {new Date(countQueueTime() * 1000).toISOString().substr(11, 8)}\r\n                    </span>\r\n                </div>\r\n                <div className='buttons'>\r\n                    <div className='controlVideoButton' onClick={() => openControlVideoHandler()}>\r\n                        Controls\r\n                    </div>\r\n                    <div className='addVideo' onClick={() => openVideoHandler()}>\r\n                        Add Video <IoAddCircleOutline className='addIcon'/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"line\" />\r\n            <div className='queueList'>\r\n                {videos.map((el, id) => (\r\n                    <QueueElement\r\n                        key={`video${el.title}${el.link}`}\r\n                        id={id}\r\n                        title={el.title} \r\n                        link={el.link} \r\n                        duration={el.duration} \r\n                        thumbnail={el.thumbnail} \r\n                        description={el.description || ''}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Queue;","import { io } from 'socket.io-client';\r\n\r\nimport React, {FC} from 'react';\r\n\r\nimport VideoPlayer from './VideoPlayer/VideoPlayer';\r\nimport './App.scss';\r\nimport Queue from './Queue/Queue';\r\n \r\nimport { serverConfig } from '../serverConfig/config';\r\n\r\nexport interface IVideo{\r\n    link: string;\r\n    thumbnail: string;\r\n    title: string;\r\n\r\n    description?: string;\r\n    duration: number;\r\n    currentTime?: number;\r\n\r\n    playing?: boolean;\r\n}\r\n\r\nexport const socket = io(serverConfig.address);\r\n\r\nconst App:FC = () => {\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <VideoPlayer />\r\n            <Queue />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default App;","export const serverConfig = {\r\n    address: 'http://maluch.mikr.us:30354',\r\n    //address: 'http://localhost:3001',\r\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}